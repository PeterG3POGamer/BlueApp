// Generated by view binder compiler. Do not edit!
package app.serlanventas.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import app.serlanventas.mobile.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentConexConfigBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final LinearLayout accordionContainer;

  @NonNull
  public final LinearLayout accordionContent;

  @NonNull
  public final Button btnActualizar;

  @NonNull
  public final MaterialButton btnDataBloque;

  @NonNull
  public final Button btnGuardar;

  @NonNull
  public final ImageButton btnInfo;

  @NonNull
  public final Button btnLimpiar;

  @NonNull
  public final ImageButton btnRefreshBluetooth;

  @NonNull
  public final EditText edtCadenaClave;

  @NonNull
  public final EditText edtCadenaClaveCierre;

  @NonNull
  public final EditText edtFormatoPeso;

  @NonNull
  public final EditText edtLongitud;

  @NonNull
  public final EditText etPesaje;

  @NonNull
  public final TextView etPesoCrudo;

  @NonNull
  public final ListView listViewRegistros;

  @NonNull
  public final RadioButton rbConectadoAhora;

  @NonNull
  public final RadioButton rbPreviamenteConectados;

  @NonNull
  public final RadioGroup rgTipoConexion;

  @NonNull
  public final NestedScrollView scrollViewCrudo;

  @NonNull
  public final Spinner spinnerDispositivosBluetooth;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final TextView txtMacDispositivo;

  @NonNull
  public final TextView txtNombreDispositivo;

  private FragmentConexConfigBinding(@NonNull NestedScrollView rootView,
      @NonNull LinearLayout accordionContainer, @NonNull LinearLayout accordionContent,
      @NonNull Button btnActualizar, @NonNull MaterialButton btnDataBloque,
      @NonNull Button btnGuardar, @NonNull ImageButton btnInfo, @NonNull Button btnLimpiar,
      @NonNull ImageButton btnRefreshBluetooth, @NonNull EditText edtCadenaClave,
      @NonNull EditText edtCadenaClaveCierre, @NonNull EditText edtFormatoPeso,
      @NonNull EditText edtLongitud, @NonNull EditText etPesaje, @NonNull TextView etPesoCrudo,
      @NonNull ListView listViewRegistros, @NonNull RadioButton rbConectadoAhora,
      @NonNull RadioButton rbPreviamenteConectados, @NonNull RadioGroup rgTipoConexion,
      @NonNull NestedScrollView scrollViewCrudo, @NonNull Spinner spinnerDispositivosBluetooth,
      @NonNull TextView tvTitle, @NonNull TextView txtMacDispositivo,
      @NonNull TextView txtNombreDispositivo) {
    this.rootView = rootView;
    this.accordionContainer = accordionContainer;
    this.accordionContent = accordionContent;
    this.btnActualizar = btnActualizar;
    this.btnDataBloque = btnDataBloque;
    this.btnGuardar = btnGuardar;
    this.btnInfo = btnInfo;
    this.btnLimpiar = btnLimpiar;
    this.btnRefreshBluetooth = btnRefreshBluetooth;
    this.edtCadenaClave = edtCadenaClave;
    this.edtCadenaClaveCierre = edtCadenaClaveCierre;
    this.edtFormatoPeso = edtFormatoPeso;
    this.edtLongitud = edtLongitud;
    this.etPesaje = etPesaje;
    this.etPesoCrudo = etPesoCrudo;
    this.listViewRegistros = listViewRegistros;
    this.rbConectadoAhora = rbConectadoAhora;
    this.rbPreviamenteConectados = rbPreviamenteConectados;
    this.rgTipoConexion = rgTipoConexion;
    this.scrollViewCrudo = scrollViewCrudo;
    this.spinnerDispositivosBluetooth = spinnerDispositivosBluetooth;
    this.tvTitle = tvTitle;
    this.txtMacDispositivo = txtMacDispositivo;
    this.txtNombreDispositivo = txtNombreDispositivo;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentConexConfigBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentConexConfigBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_conex_config, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentConexConfigBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accordionContainer;
      LinearLayout accordionContainer = ViewBindings.findChildViewById(rootView, id);
      if (accordionContainer == null) {
        break missingId;
      }

      id = R.id.accordionContent;
      LinearLayout accordionContent = ViewBindings.findChildViewById(rootView, id);
      if (accordionContent == null) {
        break missingId;
      }

      id = R.id.btnActualizar;
      Button btnActualizar = ViewBindings.findChildViewById(rootView, id);
      if (btnActualizar == null) {
        break missingId;
      }

      id = R.id.btnDataBloque;
      MaterialButton btnDataBloque = ViewBindings.findChildViewById(rootView, id);
      if (btnDataBloque == null) {
        break missingId;
      }

      id = R.id.btnGuardar;
      Button btnGuardar = ViewBindings.findChildViewById(rootView, id);
      if (btnGuardar == null) {
        break missingId;
      }

      id = R.id.btnInfo;
      ImageButton btnInfo = ViewBindings.findChildViewById(rootView, id);
      if (btnInfo == null) {
        break missingId;
      }

      id = R.id.btnLimpiar;
      Button btnLimpiar = ViewBindings.findChildViewById(rootView, id);
      if (btnLimpiar == null) {
        break missingId;
      }

      id = R.id.btnRefreshBluetooth;
      ImageButton btnRefreshBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (btnRefreshBluetooth == null) {
        break missingId;
      }

      id = R.id.edtCadenaClave;
      EditText edtCadenaClave = ViewBindings.findChildViewById(rootView, id);
      if (edtCadenaClave == null) {
        break missingId;
      }

      id = R.id.edtCadenaClaveCierre;
      EditText edtCadenaClaveCierre = ViewBindings.findChildViewById(rootView, id);
      if (edtCadenaClaveCierre == null) {
        break missingId;
      }

      id = R.id.edtFormatoPeso;
      EditText edtFormatoPeso = ViewBindings.findChildViewById(rootView, id);
      if (edtFormatoPeso == null) {
        break missingId;
      }

      id = R.id.edtLongitud;
      EditText edtLongitud = ViewBindings.findChildViewById(rootView, id);
      if (edtLongitud == null) {
        break missingId;
      }

      id = R.id.etPesaje;
      EditText etPesaje = ViewBindings.findChildViewById(rootView, id);
      if (etPesaje == null) {
        break missingId;
      }

      id = R.id.etPesoCrudo;
      TextView etPesoCrudo = ViewBindings.findChildViewById(rootView, id);
      if (etPesoCrudo == null) {
        break missingId;
      }

      id = R.id.listViewRegistros;
      ListView listViewRegistros = ViewBindings.findChildViewById(rootView, id);
      if (listViewRegistros == null) {
        break missingId;
      }

      id = R.id.rbConectadoAhora;
      RadioButton rbConectadoAhora = ViewBindings.findChildViewById(rootView, id);
      if (rbConectadoAhora == null) {
        break missingId;
      }

      id = R.id.rbPreviamenteConectados;
      RadioButton rbPreviamenteConectados = ViewBindings.findChildViewById(rootView, id);
      if (rbPreviamenteConectados == null) {
        break missingId;
      }

      id = R.id.rgTipoConexion;
      RadioGroup rgTipoConexion = ViewBindings.findChildViewById(rootView, id);
      if (rgTipoConexion == null) {
        break missingId;
      }

      id = R.id.scrollViewCrudo;
      NestedScrollView scrollViewCrudo = ViewBindings.findChildViewById(rootView, id);
      if (scrollViewCrudo == null) {
        break missingId;
      }

      id = R.id.spinnerDispositivosBluetooth;
      Spinner spinnerDispositivosBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (spinnerDispositivosBluetooth == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      id = R.id.txtMacDispositivo;
      TextView txtMacDispositivo = ViewBindings.findChildViewById(rootView, id);
      if (txtMacDispositivo == null) {
        break missingId;
      }

      id = R.id.txtNombreDispositivo;
      TextView txtNombreDispositivo = ViewBindings.findChildViewById(rootView, id);
      if (txtNombreDispositivo == null) {
        break missingId;
      }

      return new FragmentConexConfigBinding((NestedScrollView) rootView, accordionContainer,
          accordionContent, btnActualizar, btnDataBloque, btnGuardar, btnInfo, btnLimpiar,
          btnRefreshBluetooth, edtCadenaClave, edtCadenaClaveCierre, edtFormatoPeso, edtLongitud,
          etPesaje, etPesoCrudo, listViewRegistros, rbConectadoAhora, rbPreviamenteConectados,
          rgTipoConexion, scrollViewCrudo, spinnerDispositivosBluetooth, tvTitle, txtMacDispositivo,
          txtNombreDispositivo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
